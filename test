#!/bin/bash
# mOSL/test

# test
#   Find shell and bash scripts and run shellcheck on them
#   Adapted from jessfraz/dotfiles/bin/test.sh
#   https://github.com/jessfraz/dotfiles/blob/master/test.sh

set -euo pipefail
# -e exit if any command returns non-zero status code
# -u prevent using undefined variables
# -o pipefail force pipelines to fail on first non-zero status code

### Define Colours ###
/usr/bin/tput sgr0; 
# reset colors
readonly RESET=$(/usr/bin/tput sgr0)
readonly RED=$(/usr/bin/tput setaf 1)
readonly GREEN=$(/usr/bin/tput setaf 64)
readonly BLUE=$(/usr/bin/tput setaf 4)
### END Colours ###

### Define Message Format
FAIL="${RED}FATAL${RESET}"
PASS="${GREEN}PASS${RESET}"
INFO="${BLUE}INFO${RESET}"
### END Message Format


function check_shellcheck {

  if ! [ -x "$(/usr/bin/command -v shellcheck)" ]; then
    echo -e "[${FAIL}] shellcheck not installed"
    echo -e "[${INFO}] macOS: brew install shellcheck"
    echo -e "[${INFO}] Linux: apt install shellcheck"
    exit 1
  fi
}


function lint_shell_files {

  for file in $(find . -type f -not -iwholename '*.git*' \
  local file

                -not -iwholename '*venv*' \
                | sort -u); do
            # Find all regular files in source directory
            # ignore any files in .git and venv directories 
    
    if file "${file}" | grep --quiet "shell" || file "${file}" | grep --quiet "bash" ; then
      # Find bash scripts
      # Running file on a script with the shebang "#!/usr/bin/env bash" returns
      # "a /usr/bin/env bash script, ASCII text executable"
      # Versus a script with the shebang "#!/bin/bash" which returns
      # "Bourne-Again shell script, ASCII text executable"
      
      if shellcheck "${file}" ; then
        # Run shellcheck on the file
        echo -e "[${PASS}] Sucessfully linted ${file}"
      else
        echo -e "[${FAIL}] Failed to lint ${file}"
        ERRORS+=("${file}")
        # If shellcheck fails add failing file name to array
      fi
    fi
  done
}


function main {

  ERRORS=()

  check_shellcheck
  lint_shell_files

  if [ ${#ERRORS[@]} -eq 0 ]; then
    # If ERRORS empty then 
    echo -e "[${PASS}] No errors, hooray"
    exit 0
  else
    # If ERRORS not empty, print the names of files which failed
    echo -e "[${FAIL}] These files failed linting: ${ERRORS[*]}"
    exit 1
  fi
}

main "$@"
